<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>com.codelib</groupId>
    <artifactId>codelib-springboot-samples</artifactId>
    <version>0.0.1-SNAPSHOT</version>
  </parent>
  <artifactId>codelib-springboot-sample-mybatis-generator</artifactId>
  <packaging>war</packaging>
  
  
  <dependencies>
        <!-- 测试 -->
        <!-- h2内存数据库 -->
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <scope>test</scope>
        </dependency>
        <!-- 测试 END -->
                
        <!-- spring boot 配置处理器 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-configuration-processor</artifactId>
            <optional>true</optional>
        </dependency>

        <!-- spring mvc -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <!-- mybatis -->
        <dependency>
            <groupId>org.mybatis.spring.boot</groupId>
            <artifactId>mybatis-spring-boot-starter</artifactId>
            <version>1.3.0</version>
        </dependency>
        <!-- 分页插件 -->
        <dependency>
            <groupId>com.github.pagehelper</groupId>
            <artifactId>pagehelper</artifactId>
            <version>5.0.1</version>
        </dependency>

        <!-- druid -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>druid</artifactId>
            <version>1.1.1</version>
        </dependency>

        <!-- tomcat -->
        <!-- 使用到druid的监控，需要web环境 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-tomcat</artifactId>
            <scope>provided</scope>
        </dependency>

        <!-- mysql -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <scope>runtime</scope>
        </dependency>

    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.mybatis.generator</groupId>
                <artifactId>mybatis-generator-maven-plugin</artifactId>
                <version>1.3.5</version>
                <configuration>
                    <!--执行过程会输出到控制台 -->
                    <verbose>true</verbose>
                    <!--不允许覆盖生成的文件 -->
                    <!-- 如果设置为true，如果生成的java文件存在已经同名的文件，新生成的文件会覆盖原有的文件。 这个过程大概可以理解为:删除原来的,重新生成新的.对于自己写的、修改的内容没有了 
                        如果设置为false，如果存在同名的文件，MBG会给新生成的代码文件生成一个唯一的名字 例如： MyClass.java.1, MyClass.java.2 
                        等等 -->
                    <overwrite>false</overwrite>
                    <!-- 如果指定了该参数，逗号隔开的这个表会被运行， 这些表名必须和 <table> 配置中的表面完全一致。 只有指定的这些表会被执行。 
                        如果没有指定该参数，所有的表都会被执行。 -->
                    <!-- 对于修改、新增的表,指定该属性进行构建比较合理 -->
                    <!-- <tableNames></tableNames> -->
                </configuration>
                <dependencies>
                    <!-- 配置这个依赖主要是为了等下在配置MG的时候可以不用配置classPathEntry这样的一个属性，避免代码的耦合度太高 -->
                    <dependency>
                        <groupId>mysql</groupId>
                        <artifactId>mysql-connector-java</artifactId>
                        <version>5.1.42</version><!-- 必须指定版本号 -->
                    </dependency>
                </dependencies>
            </plugin>
        </plugins>
    </build>
</project>