server:
  port: 8080
  servlet:
    context-path: /druid

spring:
  devtools:
    restart:
      enabled: false
  application:
    # 应用名称
    name: druid
  datasource:
    druid:
      # 如果存在多个数据源，监控的时候可以通过名字来区分开来。
      # 如果没有配置，将会生成一个名字，格式是："DataSource-" + System.identityHashCode(this).
      name: sso
      url: jdbc:mysql://localhost:3306/yowshare_dashboard
      username: root
      password: root
      driver-class-name: com.mysql.jdbc.Driver
      # 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时。
      # 默认值 0
      # 当 initial-size 数量较多时，设置 async-init 会加快应用启动时间
      initial-size: 1
      # 最大连接池数量，默认值 8
      max-active: 20
      # 最小连接池数量
      min-idle: 1
      # 获取连接时最大等待时间，单位毫秒。
      max-wait: 6000
      # 是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。
      # 在mysql下建议关闭；分库分表较多的数据库，建议配置为false。。默认值 false
      # pool-prepared-statements: false
      # 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。
      # 在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100
      # 默认值 -1
      # max-pool-prepared-statement-per-connection-size: -1
      # 用来检测连接是否有效的sql，要求是一个查询语句，常用select 'x'。
      # 如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。
      validation-query: select 'x'
      # 单位：秒，检测连接是否有效的超时时间。
      # 底层调用jdbc Statement对象的void setQueryTimeout(int seconds)方法
      validation-query-timeout: 15
      # 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。默认值 true
      test-on-borrow: false
      # 默认值为 false，建议配置为true，不影响性能，并且保证安全性。
      # 申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
      test-while-idle: true
      # 在Druid-1.0.27之前的版本，DruidDataSource建议使用TestWhileIdle来保证连接的有效性，但仍有很多场景需要对连接进行保活处理。
      # 在1.0.28版本之后，新加入keepAlive配置，缺省关闭。
      # 打开KeepAlive之后的效果:
      # 1)初始化连接池时会填充到minIdle数量。
      # 2)连接池中的minIdle数量以内的连接，空闲时间超过minEvictableIdleTimeMillis，则会执行keepAlive操作。
      # 3)当网络断开等原因产生的由ExceptionSorter检测出来的死连接被清除后，自动补充连接到minIdle数量。
      keep-alive: true
      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒，默认值 1 分钟
      # 有两个含义：
      # 1) Destroy线程会检测连接的间隔时间，如果连接空闲时间大于等于minEvictableIdleTimeMillis则关闭物理连接。
      # 2) testWhileIdle的判断依据
      time-between-eviction-runs-millis: 60000
      # 连接保持空闲而不被驱逐的最长时间，单位是毫秒
      min-evictable-idle-time-millis: 300000
      # 配置了timeBetweenLogStatsMillis属性（大于0）之后，就会定时输出统计信息到日志中。
      # 每次输出日志会导致清零（reset）连接池相关的计数器。
      time-between-log-stats-millis: 300000
      # 当程序存在缺陷时，申请的连接忘记关闭，这时候，就存在连接泄漏了
      # 配置removeAbandoned对性能会有一些影响，建议怀疑存在泄漏之后再打开，不建议在生产环境中打开
      # remove-abandoned: true
      # 1800秒，也就是30分钟，如果连接超过30分钟未关闭，就会被强行回收
      # remove-abandoned-timeout: 1800
      # 日志记录连接申请时的调用堆栈
      # log-abandoned: true
      # 合并多个DruidDataSource的监控数据
      # use-global-data-source-stat: true
      # filter 下的属性存在顺序先后之分
      filter:
        stat:
          # 合并统计不同参数的 SQL
          merge-sql: true
          # 慢SQL记录
          log-slow-sql: true
          slow-sql-millis: 5000
        commons-log:
          # 输出可执行的 SQL
          statement-executable-sql-log-enable: true
      stat-view-servlet:
        # IP白名单 (没有配置或者为空，则允许所有访问)
        allow: 127.0.0.1
        # IP黑名单 (存在共同时，deny优先于allow)
        deny:
        # 登录监控界面用户名
        login-username: druid
        # 登录监控界面密码
        login-password: druid
        # 是否能够重置数据
        # 在StatViewSerlvet输出的html页面中，有一个功能是Reset All，执行这个操作之后，会导致所有计数器清零，重新计数。
        reset-enable: false
      web-stat-filter:
        # 忽略资源
        exclusions: '*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*'
        session-stat-max-count: 1000
        # session 统计
        session-stat-enable: true
        # 配置principalSessionName，使得druid能够知道当前的session的用户是谁
        principal-session-name: user.username
        # 配置profileEnable能够监控单个url调用的sql列表
        profile-enable: true
  thymeleaf:
    cache: false

